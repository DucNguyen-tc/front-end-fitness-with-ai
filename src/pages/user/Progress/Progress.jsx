import React, { useState, useEffect, useContext } from "react";
import {
  Box,
  Typography,
  Grid,
  Card,
  CardContent,
  Button,
  Snackbar,
  Alert,
  Stack,
  ToggleButton,
  IconButton,
} from "@mui/material";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  BarChart,
  Bar,
} from "recharts";
import ArrowBackIosNewIcon from "@mui/icons-material/ArrowBackIosNew";
import ArrowForwardIosIcon from "@mui/icons-material/ArrowForwardIos";
import FitnessCenterIcon from "@mui/icons-material/FitnessCenter";
import MonitorWeightIcon from "@mui/icons-material/MonitorWeight";
import { UserContext } from "../../../stores/UserContext";
import { getUserByAccountId } from "../../../services/userService";
import { getPlanByUserId } from "../../../services/planService";

const Progress = () => {
  const [difficulty, setDifficulty] = useState("");
  const [openSnackbar, setOpenSnackbar] = useState(false);
  const [plan, setPlan] = useState([]);
  const { user } = useContext(UserContext);
  const [userData, setUserData] = useState(null);
  const [offset, setOffset] = useState(0); // s·ªë tu·∫ßn d·ªãch chuy·ªÉn


  // ================================
  // FETCH USER
  // ================================
  useEffect(() => {
    const fetchUser = async () => {
      try {
        if (!user?.sub) return;
        const data = await getUserByAccountId(user.sub);
        setUserData(data);
      } catch (error) {
        console.error("Error fetching user:", error);
      }
    };
    fetchUser();
  }, [user?.sub]);

  // ================================
  // FETCH PLAN
  // ================================
  useEffect(() => {
    const fetchPlan = async () => {
      try {
        if (!userData?.data?._id) return;
        const response = await getPlanByUserId(userData.data._id);
        setPlan(response.data || []);
      } catch (error) {
        console.error("Error fetching plan:", error);
      }
    };
    fetchPlan();
  }, [userData?.data?._id]);

  // ================================
  // C√ÇN N·∫∂NG GI·∫¢ L·∫¨P
  // ================================
  const weightData = [
    { week: "Tu·∫ßn 1", weight: 66 },
    { week: "Tu·∫ßn 2", weight: 65.3 },
    { week: "Tu·∫ßn 3", weight: 65 },
    { week: "Tu·∫ßn 4", weight: 64.5 },
  ];

  // ================================
  // CALORIES TRONG TU·∫¶N
  // ================================
// ================================
  // CALORIES TRONG TU·∫¶N
  // ================================
  const allSessions = plan.flatMap((p) => p.sessions || []);
  const today = new Date();
  
  // T√çNH TO√ÅN TH·ª® 2
  const monday = new Date(today);
  monday.setDate(today.getDate() - today.getDay() + 1 + offset * 7);
  // --- FIX: Chu·∫©n h√≥a v·ªÅ 00:00:00 (ƒë·∫ßu ng√†y) ---
  monday.setHours(0, 0, 0, 0);

  // T√çNH TO√ÅN CH·ª¶ NH·∫¨T
  const sunday = new Date(monday);
  sunday.setDate(monday.getDate() + 6);
  // --- FIX: Chu·∫©n h√≥a v·ªÅ 23:59:59 (cu·ªëi ng√†y) ---
  sunday.setHours(23, 59, 59, 999);

  // T·∫°o m·∫£ng 7 ng√†y (th·ª© 2 -> CN)
  const weekDays = Array.from({ length: 7 }, (_, i) => {
    const d = new Date(monday);
    d.setDate(monday.getDate() + i);
    return d;
  });

  // L·ªçc session trong tu·∫ßn hi·ªán t·∫°i
  const weeklySessions = allSessions.filter((s) => {
    // Th√™m ki·ªÉm tra s.targetDate ƒë·ªÉ code an to√†n h∆°n
    if (!s.targetDate) {
      return false;
    }
    
    const d = new Date(s.targetDate);
    // console.log("date", d); // Gi·ªù b·∫°n c√≥ th·ªÉ log l·∫°i ƒë·ªÉ xem
    // console.log("status", s.status); // (B·∫°n log nh·∫ßm "monday" th√†nh "status")

    // Ph√©p so s√°nh gi·ªù ƒë√£ ch√≠nh x√°c
    return d >= monday && d <= sunday && s.status === "COMPLETED";
  });

  // Gh√©p calories theo ng√†y (n·∫øu c√≥)
  const calorieMap = {};
  weeklySessions.forEach((s) => {
    const key = new Date(s.targetDate).toLocaleDateString("vi-VN");
    calorieMap[key] = (calorieMap[key] || 0) + (s.caloriesBurned || 0);
  });

  // T·∫°o d·ªØ li·ªáu 7 ng√†y
  const calorieData = weekDays.map((d) => ({
    day: d.toLocaleDateString("vi-VN", { weekday: "short" }), // "Th 2", "Th 3"...
    calo: calorieMap[d.toLocaleDateString("vi-VN")] || 0,
  }));

  console.log("calorieData", calorieData);
  console.log("allSessions", allSessions);
  console.log("weeklySessions", weeklySessions);

  const getPeriodLabel = () => {
    return `T·ª´ ${monday.toLocaleDateString("vi-VN")} ‚Üí ${sunday.toLocaleDateString("vi-VN")}`;
  };

  const handleSubmit = () => {
    if (!difficulty) return;
    setOpenSnackbar(true);
  };

  // ================================
  // RENDER
  // ================================
  return (
    <Box p={3} sx={{ backgroundColor: "#f9fafb", minHeight: "100vh" }}>
      <Typography variant="h4" gutterBottom fontWeight="bold">
        üìä B·∫£ng ƒëi·ªÅu khi·ªÉn ti·∫øn ƒë·ªô
      </Typography>

      <Grid container spacing={3}>
        {/* C·ªòT TR√ÅI */}
        <Grid size={{ xs: 12, lg: 8 }}>
          <Stack spacing={3}>
            {/* --- Theo d√µi c√¢n n·∫∑ng --- */}
            <Card sx={{ borderRadius: 4, boxShadow: 3 }}>
              <CardContent sx={{ p: 3 }}>
                <Box
                  display="flex"
                  justifyContent="space-between"
                  alignItems="center"
                  mb={2}
                >
                  <Box>
                    <Typography variant="h6" fontWeight="600">
                      üìà Theo d√µi c√¢n n·∫∑ng
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      Xu h∆∞·ªõng gi·∫£m ·ªïn ƒë·ªãnh
                    </Typography>
                  </Box>
                  <Box textAlign="right">
                    <Typography
                      variant="h4"
                      fontWeight="bold"
                      color="secondary.main"
                    >
                      64.5 kg
                    </Typography>
                    <Typography variant="body2" color="text.secondary">
                      Hi·ªán t·∫°i
                    </Typography>
                  </Box>
                </Box>
                <ResponsiveContainer width="100%" height={250}>
                  <LineChart data={weightData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="week" />
                    <YAxis domain={[63, 67]} />
                    <Tooltip />
                    <Line
                      type="monotone"
                      dataKey="weight"
                      stroke="#9c27b0"
                      strokeWidth={3}
                      dot={{ r: 5 }}
                      activeDot={{ r: 8 }}
                    />
                  </LineChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>

            {/* --- Calories --- */}
            <Card sx={{ borderRadius: 4, boxShadow: 3 }}>
              <CardContent sx={{ p: 3 }}>
                <Box
                  display="flex"
                  justifyContent="space-between"
                  alignItems="center"
                  mb={1}
                >
                  <Box>
                    <Typography variant="h6" fontWeight="600">
                      üî• Th·ªëng k√™ Calories (tu·∫ßn)
                    </Typography>
                  </Box>
                  <Stack direction="row" spacing={1} alignItems="center">
                    <IconButton onClick={() => setOffset((prev) => prev - 1)}>
                      <ArrowBackIosNewIcon fontSize="small" />
                    </IconButton>
                    <Typography variant="body2" color="text.secondary">
                      {getPeriodLabel()}
                    </Typography>
                    <IconButton onClick={() => setOffset((prev) => prev + 1)}>
                      <ArrowForwardIosIcon fontSize="small" />
                    </IconButton>
                  </Stack>
                </Box>

                <ResponsiveContainer width="100%" height={250}>
                  <BarChart data={calorieData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="day" />
                    <YAxis />
                    <Tooltip />
                    <Bar dataKey="calo" fill="#1976d2" radius={[6, 6, 0, 0]} />
                  </BarChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>
          </Stack>
        </Grid>

        {/* C·ªòT PH·∫¢I */}
        <Grid size={{ xs: 12, lg: 4 }}>
          <Stack spacing={3}>
            <Card sx={{ borderRadius: 4, boxShadow: 3 }}>
              <CardContent>
                <Typography variant="h6" fontWeight="600" mb={2}>
                  Ch·ªâ s·ªë kh√°c
                </Typography>
                <Stack spacing={2}>
                  <Box display="flex" alignItems="center">
                    <FitnessCenterIcon color="success" sx={{ mr: 1.5 }} />
                    <Typography>
                      M·ª° c∆° th·ªÉ: <strong>18.2%</strong>
                    </Typography>
                  </Box>
                  <Box display="flex" alignItems="center">
                    <MonitorWeightIcon color="warning" sx={{ mr: 1.5 }} />
                    <Typography>
                      Bu·ªïi ƒë√£ t·∫≠p: <strong>4/5 bu·ªïi</strong>
                    </Typography>
                  </Box>
                </Stack>
              </CardContent>
            </Card>

            <Card sx={{ borderRadius: 4, boxShadow: 3, p: 1 }}>
              <CardContent>
                <Typography variant="h6" mb={2} fontWeight="600">
                  üß† ƒê√°nh gi√° tu·∫ßn n√†y
                </Typography>
                <Typography variant="body2" color="text.secondary" mb={2}>
                  Ph·∫£n h·ªìi c·ªßa b·∫°n gi√∫p AI ƒëi·ªÅu ch·ªânh k·∫ø ho·∫°ch cho tu·∫ßn t·ªõi ph√π h·ª£p h∆°n.
                </Typography>
                <Stack direction="row" spacing={1}>
                  {["easy", "medium", "hard"].map((level) => (
                    <ToggleButton
                      key={level}
                      value={level}
                      selected={difficulty === level}
                      onChange={() => setDifficulty(level)}
                      fullWidth
                    >
                      {level === "easy"
                        ? "D·ªÖ"
                        : level === "medium"
                        ? "V·ª´a s·ª©c"
                        : "Kh√≥"}
                    </ToggleButton>
                  ))}
                </Stack>
                <Button
                  variant="contained"
                  onClick={handleSubmit}
                  disabled={!difficulty}
                  sx={{ mt: 2 }}
                  fullWidth
                >
                  G·ª≠i ƒë√°nh gi√°
                </Button>
              </CardContent>
            </Card>
          </Stack>
        </Grid>
      </Grid>

      <Snackbar
        open={openSnackbar}
        autoHideDuration={4000}
        onClose={() => setOpenSnackbar(false)}
      >
        <Alert
          severity="success"
          sx={{ width: "100%", borderRadius: 2, boxShadow: 6 }}
        >
          ü§ñ C·∫£m ∆°n b·∫°n! K·∫ø ho·∫°ch tu·∫ßn sau s·∫Ω ƒë∆∞·ª£c ƒëi·ªÅu ch·ªânh.
        </Alert>
      </Snackbar>
    </Box>
  );
};

export default Progress;
